# Copyright 2022-2025 Chris Croome
#
# This file is part of the Webarchitects Debian alternatives Ansible role.
#
# The Webarchitects Debian alternatives Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Debian alternatives Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Debian alternatives Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check the alternatives
  block:

    - name: Proposed alternative doesn't match local facts
      ansible.builtin.debug:
        msg: "Proposed alternative {{ alt_update.name }} doesn't match existing alternatives so checking the proposed variables"

    - name: Debug local facts
      ansible.builtin.debug:
        var: ansible_local.update_alternatives.selections[alt_update.name]
        verbosity: 2
      when: ansible_local.update_alternatives.selections[alt_update.name] is defined

    - name: Debug proposed alternative
      ansible.builtin.debug:
        var: alt_update
        verbosity: 2

    - name: Check alternative name
      ansible.builtin.assert:
        that:
          - alt_update.name is defined
          - alt_update.name | type_debug is regex('AnsibleUnicode|AnsibleUnsafeText|str')
        quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"

    - name: Check alternative state
      ansible.builtin.assert:
        that:
          - alt_update.state is regex('^present|absent$')
        quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
      when: alt_update.state is defined

    - name: Checks when alternative is present
      block:

        - name: Check alternative link
          ansible.builtin.assert:
            that:
              - alt_update.link is defined
              - alt_update.link is regex('^\/')
              - alt_update.link | type_debug is regex('^AnsibleUnicode|AnsibleUnsafeText|str$')
            quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"

        - name: Check alternative status
          ansible.builtin.assert:
            that:
              - alt_update.status is defined
              - alt_update.status is regex('auto|manual$')
            quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"

        - name: Debug best alternatives
          ansible.builtin.debug:
            msg:
              - "alternatives: {{ alt_update.alternatives | map(attribute='alternative') }}"
              - "best: {{ alt_update.best }}"
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

        - name: Check that best is one of the alternatives
          ansible.builtin.assert:
            that:
              - alt_update.best in ( alt_update.alternatives | map(attribute='alternative') )
            quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"

        - name: Check best path
          ansible.builtin.include_tasks: check_path.yml
          vars:
            path: "{{ alt_update.best }}"

        - name: Check that value is one of the alternatives
          ansible.builtin.assert:
            that:
              - alt_update.value in ( alt_update.alternatives | map(attribute='alternative') )
            quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"

        - name: Check value path
          ansible.builtin.include_tasks: check_path.yml
          vars:
            path: "{{ alt_update.value }}"

        - name: Include checks for alternative slaves when present
          ansible.builtin.include_tasks: check_slave.yml
          loop: "{{ alt_update.slaves }}"
          loop_control:
            loop_var: slave
            label: "{{ slave.name }}"
          when: ( alt_update.slaves is defined ) and (alt_update.slaves != [] )

        - name: Include checks for alternative alternatives when present
          ansible.builtin.include_tasks: check_alternative.yml
          loop: "{{ alt_update.alternatives }}"
          loop_control:
            loop_var: alt
            label: "{{ alt.alternative }}"
          when: ( alt_update.alternatives is defined ) and (alt_update.alternatives != [] )

      when: ( alt_update.state is not defined ) or ( alt_update.state == "present" )

  tags:
    - alternatives
...
