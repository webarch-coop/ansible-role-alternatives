# Copyright 2022-2025 Chris Croome
#
# This file is part of the Webarchitects Debian alternatives Ansible role.
#
# The Webarchitects Debian alternatives Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Debian alternatives Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Debian alternatives Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Remove or update alternative
  block:

    - name: Remove alternative
      block:

        - name: "Check remove alternative {{ alternative.alternative }}"
          ansible.builtin.debug:
            msg: >-
              update-alternatives {% if alternatives_debug and ansible_verbosity >= 2 %}--debug{% elif ansible_verbosity == 1 %}--verbose{% endif %}
              --remove {{ alt_update.name | quote }} {{ alternative.alternative | quote }}
          when: ( ansible_check_mode ) or ( ansible_verbosity >= 1 )

        - name: "Remove alternative {{ alternative.alternative }}"
          ansible.builtin.command:
            cmd: >-
              update-alternatives {% if alternatives_debug and ansible_verbosity >= 2 %}--debug{% elif ansible_verbosity == 1 %}--verbose{% endif %}
              --remove "{{ alt_update.name }}" "{{ alternative.alternative }}"
          register: alternative_removed
          notify: Update ansible_local

      rescue:

        - name: Debug remove result standard out
          ansible.builtin.debug:
            var: alternative_removed.stdout_lines
            verbosity: 2
          when: ( alternative_removed.stdout is defined ) and ( alternative_removed.stdout | length > 0 )

        - name: Debug remove result standard error
          ansible.builtin.debug:
            var: alternative_removed.stderr_lines
            verbosity: 2
          when: ( alternative_removed.stderr is defined ) and ( alternative_removed.stderr | length > 0 )

        - name: Fail as there was an error running update-alternatives --remove
          ansible.builtin.fail:
            msg: "Removal of alternative {{ alternative.alternative }} failed."

      when: ( alternative.state is defined ) and ( alternative.state == "absent" )

    - name: Update alternative
      block:

        - name: "Set a empty variables for the slaves part of the update-alternatives command for {{ alt_update.name }} alternative {{ alternative.alternative }}"
          ansible.builtin.set_fact:
            alternative_slaves: ""

        - name: "Loop though the {{ alt_update.name }} slaves to generate the slaves part of the update-alternatives command"
          ansible.builtin.include_tasks: update_slave.yml
          when:
            - ( alt_update.slaves is defined ) and ( alt_update.slaves != [] )
            - ( alternative.slaves is defined ) and ( alternative.slaves != [] )
          loop: "{{ alt_update.slaves }}"
          # loop: "{{ alternative.slaves }}"
          loop_control:
            loop_var: slave
            label: "{{ slave.path }}"

        - name: "Check update alternative {{ alternative.alternative }}"
          ansible.builtin.debug:
            msg: >-
              update-alternatives {% if alternatives_debug and ansible_verbosity >= 2 %}--debug{% elif ansible_verbosity == 1 %}--verbose{% endif %}
              --install {{ alt_update.link | quote }} {{ alt_update.name | quote }} {{ alternative.alternative | quote }} {{ alternative.priority | quote }}
              {% if alternative_slaves is defined and alternative_slaves | length > 0 %}{{ alternative_slaves }}{% endif %}
          when: ( ansible_check_mode ) or ( ansible_verbosity >= 1 )

        - name: "Update alternative {{ alternative.alternative }}"
          ansible.builtin.command:
            cmd: >-
              update-alternatives {% if alternatives_debug and ansible_verbosity >= 2 %}--debug{% elif ansible_verbosity == 1 %}--verbose{% endif %}
              --install {{ alt_update.link | quote }} {{ alt_update.name | quote }} {{ alternative.alternative | quote }} {{ alternative.priority | quote }}
              {% if alternative_slaves is defined and alternative_slaves | length > 0 %}{{ alternative_slaves }}{% endif %}
          register: alternative_updated
          notify: Update ansible_local

      rescue:

        - name: Debug update result standard out
          ansible.builtin.debug:
            var: alternative_updated.stdout_lines
            verbosity: 2
          when: ( alternative_updated.stdout is defined ) and ( alternative_updated.stdout | length > 0 )

        - name: Debug update result standard error
          ansible.builtin.debug:
            var: alternative_updated.stderr_lines
            verbosity: 2
          when: ( alternative_updated.stderr is defined ) and ( alternative_updated.stderr | length > 0 )

        - name: Fail as there was an error running update-alternatives --install
          ansible.builtin.fail:
            msg: "Installing alternative {{ alternative.alternative }} failed."

      when: ( alternative.state is not defined ) or ( alternative.state == "present" )

  tags:
    - alternatives
...
