---
- name: Remove or update alternative
  block:

    - name: Remove alternative
      block:

        - name: "Check remove alternative {{ alternative.alternative }}"
          ansible.builtin.debug:
            msg: >
              update-alternatives {% if ansible_verbosity >= 1 %}--verbose{% elif alternatives_debug and ansible_verbosity >= 2 %}--debug{% endif %}
              --remove {{ alt_update.name | quote }} {{ alternative.alternative | quote }}
          when: ( ansible_check_mode ) or ( ansible_verbosity >= 1 )

        - name: "Remove alternative {{ alternative.alternative }}"
          ansible.builtin.command:
            cmd: >
              update-alternatives {% if ansible_verbosity >= 1 %}--verbose{% elif alternatives_debug and ansible_verbosity >= 2 %}--debug{% endif %}
              --remove "{{ alt_update.name }}" "{{ alternative.alternative }}"
          register: alternative_removed
          notify: Update ansible_local

      rescue:

        - name: Debug remove result standard out
          ansible.builtin.debug:
            var: alternative_removed.stdout
            verbosity: 2
          when: ( alternative_removed.stdout is defined ) and ( alternative_removed.stdout | length > 0 )

        - name: Debug remove result standard error
          ansible.builtin.debug:
            var: alternative_removed.stderr
            verbosity: 2
          when: ( alternative_removed.stderr is defined ) and ( alternative_removed.stderr | length > 0 )

        - name: Fail as there was an error running update-alternatives --remove
          ansible.builtin.fail:
            msg: "Removal of alternative {{ alternative.alternative }} failed."

      when: ( alternative.state is defined ) and ( alternative.state == "absent" )

    - name: Update alternative
      block:

        - name: "Check update alternative {{ alternative.alternative }}"
          ansible.builtin.debug:
            msg: >
              update-alternatives {% if ansible_verbosity >= 1 %}--verbose{% elif alternatives_debug and ansible_verbosity >= 2 %}--debug{% endif %}
              --install {{ alt_update.link | quote }} {{ alt_update.name | quote }} {{ alternative.alternative | quote }} {{ alternative.priority | quote }}
              {% if alternative.slaves is defined %}
                {% for slave in alternative.slaves %}
                  --slave {{ alt_update.link | quote }} {{ slave.name | quote }} {{ slave.path | quote }}
                {% endfor %}
              {% endif %}
          when: ( ansible_check_mode ) or ( ansible_verbosity >= 1 )

        - name: "Update alternative {{ alternative.alternative }}"
          ansible.builtin.command:
            cmd: >
              update-alternatives {% if ansible_verbosity >= 1 %}--verbose{% elif alternatives_debug and ansible_verbosity >= 2 %}--debug{% endif %}
              --install {{ alt_update.link | quote }} {{ alt_update.name | quote }} {{ alternative.alternative | quote }} {{ alternative.priority | quote }}
              {% if alternative.slaves is defined %}
                {% for slave in alternative.slaves %}
                  --slave {{ alt_update.link | quote }} {{ slave.name | quote }} {{ slave.path | quote }}
                {% endfor %}
              {% endif %}
          register: alternative_updated
          notify: Update ansible_local

      rescue:

        - name: Debug update result standard out
          ansible.builtin.debug:
            var: alternative_updated.stdout
            verbosity: 2
          when: ( alternative_updated.stdout is defined ) and ( alternative_updated.stdout | length > 0 )

        - name: Debug update result standard error
          ansible.builtin.debug:
            var: alternative_updated.stderr
            verbosity: 2
          when: ( alternative_updated.stderr is defined ) and ( alternative_updated.stderr | length > 0 )

        - name: Fail as there was an error running update-alternatives --install
          ansible.builtin.fail:
            msg: "Installing alternative {{ alternative.alternative }} failed."

      when: ( alternative.state is not defined ) or ( alternative.state == "present" )

    - name: Reload ansible_local.alternatives facts
      ansible.builtin.meta: flush_handlers
      when: ( alternative_removed.changed ) or ( alternative_updated.changed )

  tags:
    - alternatives
...
