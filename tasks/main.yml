# Copyright 2022-2025 Chris Croome
#
# This file is part of the Webarchitects Debian alternatives Ansible role.
#
# The Webarchitects Debian alternatives Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Debian alternatives Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Debian alternatives Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Ansible update-alternatives
  block:

    - name: Include check tasks
      ansible.builtin.include_tasks: check.yml

    - name: Record the current state of the ansible_local.alternatives if defined
      block:

        - name: Set a variable for the existing ansible_local.alternatives is defined
          ansible.builtin.set_fact:
            alternatives_previous_facts: "{{ ansible_local.update_alternatives }}"

        - name: Debug the current ansible_local.update_alternatives facts
          ansible.builtin.debug:
            var: ansible_local.update_alternatives
            verbosity: 2

      when: ( ansible_local.update_alternatives is defined ) and ( ansible_local.update_alternatives != [] )

    - name: Include local facts tasks
      ansible.builtin.include_tasks: local_facts.yml
      when: alternative_facts | bool

    - name: Update alternatives
      block:

        - name: Include update tasks for alternatives that need updating
          ansible.builtin.include_tasks: update.yml
          when: >
            ( ansible_local.update_alternatives.selections[alt_update.name] is not defined ) or
            ( alt_update != ansible_local.update_alternatives.selections[alt_update.name] )
          loop: "{{ alternatives_update }}"
          loop_control:
            loop_var: alt_update
            label: "{{ alt_update }}"

      when: ( alternatives_update is defined ) and ( alternatives_update != [] )

    - name: Reload ansible_local.update_alternatives facts
      ansible.builtin.meta: flush_handlers

    - name: Debug the updated ansible_local.alternatives facts when they have changed
      ansible.builtin.debug:
        var: ansible_local.update_alternatives
        verbosity: 2
      when:
        - alternatives_previous_facts is defined
        - ansible_local.update_alternatives != alternatives_previous_facts

  when: alternatives | bool
  tags:
    - alternatives
...
